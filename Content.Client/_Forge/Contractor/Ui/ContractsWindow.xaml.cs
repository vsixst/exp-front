using Content.Client.UserInterface.Controls;
using Content.Shared._Forge.Contractor;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Forge.Contractor.Ui;

[GenerateTypedNameReferences]
public sealed partial class ContractsWindow : FancyWindow
{
    public Action<string>? OnAcceptButtonPressed;
    public Action<string>? OnCompleteButtonPressed;
    public Action? OnShopButtonPressed;

    public ContractsWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        MasterTabContainer.SetTabTitle(0, Loc.GetString("contracts-tab-available"));
        MasterTabContainer.SetTabTitle(1, Loc.GetString("contracts-tab-active"));

        ShopButton.OnPressed += _ => OnShopButtonPressed?.Invoke();
    }

    public void UpdateState(ContractsUpdateStateMessage state)
    {
        AvailableContractsContainer.Children.Clear();
        foreach (var contract in state.AvailableContracts)
        {
            var entry = new ContractEntry(contract);
            entry.OnAcceptButtonPressed += () => OnAcceptButtonPressed?.Invoke(contract.ContractId);
            AvailableContractsContainer.AddChild(entry);
        }

        ActiveContractsContainer.Children.Clear();
        foreach (var contract in state.ActiveContracts)
        {
            var entry = new ActiveContractEntry(contract);
            entry.OnCompleteButtonPressed += () => OnCompleteButtonPressed?.Invoke(contract.ContractId);
            ActiveContractsContainer.AddChild(entry);
        }
    }
}
