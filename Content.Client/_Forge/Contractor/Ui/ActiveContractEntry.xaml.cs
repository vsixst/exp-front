using Content.Client.Message;
using Content.Shared._Forge.Contractor;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client._Forge.Contractor.Ui;

[GenerateTypedNameReferences]
public sealed partial class ActiveContractEntry : BoxContainer
{
    [Dependency] private readonly IEntityManager _entMan = default!;
    [Dependency] private readonly IGameTiming _gameTiming = default!;

    public Action? OnCompleteButtonPressed;

    public ActiveContractEntry(ActiveContract contract)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        var target = _entMan.GetEntity(contract.TargetEntity);

        TargetPortrait.SetEntity(target);
        TargetNameLabel.SetMarkup(Loc.GetString("contracts-target-name", ("name", contract.TargetName)));
        TargetJobLabel.SetMarkup(Loc.GetString("contracts-target-job", ("job", contract.TargetJob)));
        DescriptionLabel.SetMarkup(Loc.GetString("contracts-description", ("reason", contract.Description)));
        RewardLabel.SetMarkup(Loc.GetString("contracts-reward", ("reward", contract.Reward), ("tcreward", contract.TelecrystalReward)));
        EvacPointLabel.Text = Loc.GetString(contract.EvacPointName);
        StatusLabel.Text = Loc.GetString($"contract-status-{contract.Status.ToString().ToLower()}");
        var timeLeft = contract.TimeRemaining - _gameTiming.CurTime;
        TimeRemainingLabel.Text = Loc.GetString("contracts-time-remaining-value", ("minutes", timeLeft.Minutes),
            ("seconds", timeLeft.Seconds));

        if (timeLeft.TotalMinutes < 5)
        {
            TimeRemainingLabel.FontColorOverride = Color.Red;
        }

        CompleteButton.Disabled = contract.Status == ContractStatus.Active;
        CompleteButton.OnPressed += _ => OnCompleteButtonPressed?.Invoke();
    }
}
